---

---

<!-- <html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>MNC</title>
  </head>
  <body>
    <div id="container"></div>
  </body>
</html>
<style is:global>
  * {
    margin: 0;
    padding: 0;
  }
  .tempcanvas {
    position: fixed;
    z-index: 9999;
    top: 0;
    left: 0;
    background: red;
    display: none;
  }
</style>
<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import gsap from "gsap";

  let size = 400;
  let canvas = document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = 600;
  canvas.height = size;
  canvas.classList.add("tempcanvas");
  document.body.appendChild(canvas);

  function Perlin(x, y, z) {
    var p = new Array(512);
    var permutation = [
      151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
      140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
      120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177,
      33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165,
      71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,
      133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,
      63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
      135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
      226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206,
      59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248,
      152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22,
      39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,
      246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241,
      81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,
      184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
      222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
    ];
    for (var i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];

    var X = Math.floor(x) & 255, // FIND UNIT CUBE THAT
      Y = Math.floor(y) & 255, // CONTAINS POINT.
      Z = Math.floor(z) & 255;
    x -= Math.floor(x); // FIND RELATIVE X,Y,Z
    y -= Math.floor(y); // OF POINT IN CUBE.
    z -= Math.floor(z);
    var u = fade(x), // COMPUTE FADE CURVES
      v = fade(y), // FOR EACH OF X,Y,Z.
      w = fade(z);
    var A = p[X] + Y,
      AA = p[A] + Z,
      AB = p[A + 1] + Z, // HASH COORDINATES OF
      B = p[X + 1] + Y,
      BA = p[B] + Z,
      BB = p[B + 1] + Z; // THE 8 CUBE CORNERS,

    return scale(
      lerp(
        w,
        lerp(
          v,
          lerp(
            u,
            grad(p[AA], x, y, z), // AND ADD
            grad(p[BA], x - 1, y, z)
          ), // BLENDED
          lerp(
            u,
            grad(p[AB], x, y - 1, z), // RESULTS
            grad(p[BB], x - 1, y - 1, z)
          )
        ), // FROM  8
        lerp(
          v,
          lerp(
            u,
            grad(p[AA + 1], x, y, z - 1), // CORNERS
            grad(p[BA + 1], x - 1, y, z - 1)
          ), // OF CUBE
          lerp(
            u,
            grad(p[AB + 1], x, y - 1, z - 1),
            grad(p[BB + 1], x - 1, y - 1, z - 1)
          )
        )
      )
    );
  }

  function fade(t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
  }

  function lerp(t, a, b) {
    return a + t * (b - a);
  }

  function grad(hash, x, y, z) {
    var h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE
    var u = h < 8 ? x : y, // INTO 12 GRADIENT DIRECTIONS.
      v = h < 4 ? y : h == 12 || h == 14 ? x : z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
  }

  function scale(n) {
    return (1 + n) / 2;
  }

  function fillUp(array, max) {
    let length = array.length;
    for (let i = 0; i < max - length; i++) {
      array.push(array[Math.floor(Math.random() * length)]);
    }
    return array;
  }

  function shuffle(a) {
    for (let i = a.length; i; i--) {
      let j = Math.floor(Math.random() * i);
      [a[i - 1], a[j]] = [a[j], a[i - 1]];
    }
    return a;
  }
  function loadImagesSequentially(paths, whenLoaded) {
    let imgs = [];

    async function loadImage(path) {
      return new Promise((resolve, reject) => {
        let img = new Image();
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = path;
      });
    }

    async function loadAllImages() {
      for (const path of paths) {
        const img = await loadImage(path);
        imgs.push(img);
      }
      whenLoaded(imgs);
    }

    loadAllImages();
  }
  function hslToRgb(h, s, l) {
    s /= 100;
    l /= 100;

    let c = (1 - Math.abs(2 * l - 1)) * s;
    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));
    let m = l - c / 2;
    let r = 0,
      g = 0,
      b = 0;

    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }

    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    return [r / 255, g / 255, b / 255];
  }

  function getArrayFromImage(img, sizeX, sizeY) {
    let imageCoords = [];
    ctx.clearRect(0, 0, sizeX, sizeY);
    ctx.drawImage(img, 0, 0, sizeX, sizeY);
    let data = ctx.getImageData(0, 0, sizeX, sizeY).data;

    for (let y = 0; y < sizeY; y++) {
      for (let x = 0; x < sizeX; x++) {
        let alpha = data[(sizeX * y + x) * 4 + 3];
        if (alpha > 0) {
          imageCoords.push([10 * (x - sizeX / 2), 10 * (sizeY / 2 - y)]);
        }
      }
    }
    return shuffle(fillUp(imageCoords, 1500));
  }

  let images = [ "default-map.png"];
  loadImagesSequentially(images, function (loadedImages) {
    let gallery = [];
    gallery.push(getArrayFromImage(loadedImages[0], 600, 400));
    // gallery.push(getArrayFromImage(loadedImages[1], 600, 400));

    let camera, controls, scene, renderer;
    let geometry, pointCloud;

    function init() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x000);

      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);

      let container = document.getElementById("container");
      container.appendChild(renderer.domElement);

      camera = new THREE.PerspectiveCamera(
        90,
        window.innerWidth / window.innerHeight,
        1,
        5000
      );
      camera.position.z = 2800;

      controls = new OrbitControls(camera, renderer.domElement);

      let texture = new THREE.TextureLoader().load("particle.png");
      let material = new THREE.PointsMaterial({
        size: 30,
        vertexColors: true,
        map: texture,
        alphaTest: 0.6,
      });

      geometry = new THREE.BufferGeometry();
      const vertices = [];
      const colors = [];
      let colorHue = Math.floor(Math.random() * 360);
      const lightMultiList = [40, 50, 70, 80, 100];
      const lightMulti =
        lightMultiList[Math.floor(lightMultiList.length * Math.random())];
      const saturateMultiList = [0, 40, 50, 70, 80, 100];
      const saturateMulti =
        saturateMultiList[Math.floor(saturateMultiList.length * Math.random())];

      gallery[0].forEach((el, index) => {
        const zPos = Math.random() * 100;
        vertices.push(el[0], el[1], zPos);
        const [r, g, b] = hslToRgb(
          colorHue,
          0,
          100
        //   (zPos / 300) * lightMulti
        ); // Adjust lightness based on zPos
        colors.push(r, g, b);
      });

      geometry.setAttribute(
        "position",
        new THREE.Float32BufferAttribute(vertices, 3)
      );
      geometry.setAttribute(
        "color",
        new THREE.Float32BufferAttribute(colors, 3)
      );

      pointCloud = new THREE.Points(geometry, material);
      scene.add(pointCloud);
      console.log(geometry.attributes.position);

      window.addEventListener("resize", onWindowResize, false);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }
    const clock = new THREE.Clock();
    let time = 0;

    function animate() {
      requestAnimationFrame(animate);
      time++;

      let positions = geometry.attributes.position.array;

      for (let i = 0; i < positions.length; i += 3) {
        let dX = 0;
        let dY = 0;
        let dZ = Math.sin(time / 10 + positions[i] / 0.5) * 0.1;

        positions[i] += dX;
        positions[i + 1] += dY;
        positions[i + 2] += dZ;
      }
      geometry.attributes.position.needsUpdate = true;
      render();
    }

    function render() {
      renderer.render(scene, camera);
    }

    init();
    animate();

    let current = 0;
    document.body.addEventListener("click", function () {
      current++;
      current = current % gallery.length;
      geometry.attributes.position.array.forEach((value, index) => {
        if (index % 3 === 0) {
          gsap.to(geometry.attributes.position.array, {
            duration: 1,
            [index]: gallery[current][index / 3][0],
            [index + 1]: gallery[current][index / 3][1],
          });
        }
      });
      geometry.attributes.position.needsUpdate = true;
    });
  });
</script> -->
